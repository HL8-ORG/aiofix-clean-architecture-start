---
description: project-structure
globs:
alwaysApply: false
---
---
# 
## 概述

本项目采用DDD（领域驱动设计）+ Clean Architecture（整洁架构）设计模式，实现高度模块化、可维护、可扩展的后端API架构。

## 架构设计原则

### 1. 分层架构 (Layered Architecture)

- **Domain Layer** - 纯业务逻辑，无外部依赖
- **Application Layer** - 业务用例协调
- **Infrastructure Layer** - 技术实现细节
- **Presentation Layer** - 用户界面和API

### 2. 模块化设计 (Modular Design)

- 每个业务模块独立，包含完整的四层架构
- 模块间通过接口通信，降低耦合
- 共享层提供通用功能

### 3. 依赖倒置 (Dependency Inversion)

- 高层模块不依赖低层模块
- 抽象不依赖具体实现
- 通过依赖注入实现解耦

### 4. 单一职责 (Single Responsibility)

- 每个类/模块只负责一个功能
- 清晰的职责边界
- 易于测试和维护

## 文件结构

```
apps/api/src/
├── main.ts                          # 应用入口
├── app.module.ts                    # 根模块
├── app.controller.ts                 # 根控制器
├── app.service.ts                    # 根服务
│
├── shared/                          # 共享层
│   ├── domain/                      # 共享领域
│   │   ├── entities/                # 共享实体
│   │   │   └── base.entity.ts      # 基础实体
│   │   ├── value-objects/           # 值对象
│   │   ├── events/                  # 领域事件
│   │   └── exceptions/              # 领域异常
│   │
│   ├── infrastructure/              # 共享基础设施
│   │   ├── database/                # 数据库配置
│   │   │   ├── config/             # 数据库配置
│   │   │   ├── migrations/         # 数据库迁移
│   │   │   └── seeders/            # 数据种子
│   │   ├── logging/                # 日志配置
│   │   ├── auth/                   # 认证配置
│   │   └── cache/                  # 缓存配置
│   │
│   ├── application/                 # 共享应用服务
│   │   ├── interfaces/             # 应用接口
│   │   ├── dto/                   # 共享DTO
│   │   └── validators/            # 共享校验器
│   │
│   └── presentation/               # 共享表现层
│       ├── decorators/            # 自定义装饰器
│       ├── guards/                # 守卫
│       ├── interceptors/          # 拦截器
│       ├── filters/               # 异常过滤器
│       └── middlewares/           # 中间件
│
├── modules/                        # 业务模块
│   │
│   ├── users/                     # 用户模块 (示例)
│   │   ├── domain/
│   │   ├── application/
│   │   ├── infrastructure/
│   │   ├── presentation/
│   │   └── users.module.ts
│   │
│   ├── auth/                      # 认证模块 (示例)
│   │   ├── domain/
│   │   ├── application/
│   │   ├── infrastructure/
│   │   ├── presentation/
│   │   └── auth.module.ts
│   │
│   └── tenants/                   # 租户模块 (示例)
│       ├── domain/
│       ├── application/
│       ├── infrastructure/
│       ├── presentation/
│       └── tenants.module.ts
```

## 各层职责说明

### Domain Layer (领域层)

- **Entities**: 领域实体，包含业务逻辑和状态
- **Value Objects**: 值对象，不可变的数据结构
- **Repositories**: 仓储接口，定义数据访问抽象
- **Services**: 领域服务，处理跨实体的业务逻辑
- **Events**: 领域事件，用于模块间通信

### Application Layer (应用层)

- **Services**: 应用服务，协调领域对象完成业务用例
- **DTOs**: 数据传输对象，定义API接口数据结构
- **Interfaces**: 应用接口，定义服务契约
- **Validators**: 应用校验器，验证业务规则

### Infrastructure Layer (基础设施层)

- **Entities**: ORM实体，数据库映射对象
- **Repositories**: 仓储实现，具体的数据访问逻辑
- **External**: 外部服务集成，如第三方API

### Presentation Layer (表现层)

- **Controllers**: 控制器，处理HTTP请求和响应
- **DTOs**: 表现层DTO，定义API响应格式
- **Validators**: 表现层校验器，验证请求参数




## 实施原则

1. **渐进式迁移** - 不破坏现有功能
2. **保持向后兼容** - 逐步替换，确保平滑过渡
3. **测试驱动** - 每个重构步骤都有测试保障
4. **文档更新** - 同步更新README和API文档

## 技术栈

- **Framework**: NestJS
- **Language**: TypeScript
- **Database**: PostgreSQL (MikroORM)
- **Authentication**: JWT
- **Logging**: Pino
- **Testing**: Jest
- **Documentation**: Swagger

## 开发指南

### 添加新功能

1. 在对应层添加新文件
2. 遵循单一职责原则
3. 编写单元测试和集成测试
4. 更新相关文档

### 测试策略

- **单元测试**: 测试单个类或方法
- **集成测试**: 测试模块间的交互
- **端到端测试**: 测试完整的业务流程
